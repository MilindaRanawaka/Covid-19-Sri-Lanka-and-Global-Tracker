{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["FetchData","state","loading","update_date_time","local_new_cases","local_total_cases","local_total_number_of_individuals_in_hospitals","local_deaths","local_new_deaths","local_recovered","global_new_cases","global_total_cases","global_deaths","global_new_deaths","global_recovered","fetch","response","json","data","this","setState","console","log","style","padding","paddingBottom","className","paddingTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAGqBA,G,kNAEjBC,MAAQ,CACRC,SAAS,EACLC,iBAAkB,KAClBC,gBAAiB,KACjBC,kBAAmB,KACnBC,+CAAgD,KAChDC,aAAc,KACdC,iBAAkB,KAClBC,gBAAiB,KACjBC,iBAAkB,KAClBC,mBAAoB,KACpBC,cAAe,KACfC,kBAAmB,KACnBC,iBAAkB,M,0LAIN,wD,SAEWC,MAFX,yD,cAENC,E,gBACaA,EAASC,O,OAAtBC,E,OACNC,KAAKC,SAAS,CACVjB,iBAAkBe,EAAKA,KAAKf,iBAC5BC,gBAAiBc,EAAKA,KAAKd,gBAC3BC,kBAAmBa,EAAKA,KAAKb,kBAC7BC,+CAAgDY,EAAKA,KAAKZ,+CAC1DC,aAAcW,EAAKA,KAAKX,aACxBC,iBAAkBU,EAAKA,KAAKV,iBAC5BC,gBAAiBS,EAAKA,KAAKT,gBAC3BC,iBAAkBQ,EAAKA,KAAKR,iBAC5BC,mBAAoBO,EAAKA,KAAKP,mBAC9BC,cAAeM,EAAKA,KAAKN,cACzBC,kBAAmBK,EAAKA,KAAKL,kBAC7BC,iBAAkBI,EAAKA,KAAKJ,iBAC5BZ,SAAS,IAEbmB,QAAQC,IAAIJ,G,qIAIZ,OACI,6BACCC,KAAKlB,MAAMC,UAAYiB,KAAKlB,MAAME,iBAC/B,4CAEA,6BAEI,yBAAKoB,MAAO,CAACC,QAAS,OAAQC,cAAe,SAE7C,yCAEA,yBAAKC,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMG,kBAEzC,yBAAKsB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGR,yBAAKuB,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMI,oBAEzC,yBAAKqB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGR,yBAAKuB,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,UACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMM,eAEzC,yBAAKmB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,QAKZ,6BAEA,yBAAKuB,UAAU,aACX,yBAAKA,UAAU,QACP,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMQ,kBAEzC,yBAAKiB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGZ,yBAAKuB,UAAU,QACP,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,cACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMO,mBAEzC,yBAAKkB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGZ,yBAAKuB,UAAU,QACP,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,uDACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMK,iDAEzC,yBAAKoB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,SAOhB,yBAAKoB,MAAO,CAACC,QAAS,OAAQG,WAAY,SAC1C,sCAEA,yBAAKD,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMS,mBAEzC,yBAAKgB,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGR,yBAAKuB,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,eACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMU,qBAEzC,yBAAKe,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGR,yBAAKuB,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,UACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMW,gBAEzC,yBAAKc,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,QAKZ,6BAEA,yBAAKuB,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,aACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMa,mBAEzC,yBAAKY,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,OAGR,yBAAKuB,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,cACA,uBAAGA,UAAU,aAAaP,KAAKlB,MAAMY,oBAEzC,yBAAKa,UAAU,eACX,2BAAOA,UAAU,cAAjB,gBAA4CP,KAAKlB,MAAME,iBAAvD,e,GAxKOyB,cCSnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.f0a2d047.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nexport default class FetchData extends Component{\n\n    state = {\n    loading: true,\n        update_date_time: null,\n        local_new_cases: null,\n        local_total_cases: null,\n        local_total_number_of_individuals_in_hospitals: null,\n        local_deaths: null,\n        local_new_deaths: null,\n        local_recovered: null,\n        global_new_cases: null,\n        global_total_cases: null,\n        global_deaths: null,\n        global_new_deaths: null,\n        global_recovered: null,\n    };\n\n    async componentDidMount(){\n        const url = \"https://hpb.health.gov.lk/api/get-current-statistical\";\n\n        const response = await fetch(url);\n        const data = await response.json();\n        this.setState({\n            update_date_time: data.data.update_date_time,\n            local_new_cases: data.data.local_new_cases,\n            local_total_cases: data.data.local_total_cases,\n            local_total_number_of_individuals_in_hospitals: data.data.local_total_number_of_individuals_in_hospitals,\n            local_deaths: data.data.local_deaths,\n            local_new_deaths: data.data.local_new_deaths,\n            local_recovered: data.data.local_recovered,\n            global_new_cases: data.data.global_new_cases,\n            global_total_cases: data.data.global_total_cases,\n            global_deaths: data.data.global_deaths,\n            global_new_deaths: data.data.global_new_deaths,\n            global_recovered: data.data.global_recovered,\n            loading: false\n        });\n        console.log(data);\n    }\n\n    render() {\n        return (\n            <div>\n            {this.state.loading || !this.state.update_date_time ? (\n                <div>Loading....</div>\n            ) :(\n                <div>\n\n                    <div style={{padding: \"50px\", paddingBottom: \"20px\"}}>\n\n                    <h1>Sri Lanka</h1>\n\n                    <div className=\"card-deck\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">New Cases</h5>\n                                <p className=\"card-text\">{this.state.local_new_cases}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Total Cases</h5>\n                                <p className=\"card-text\">{this.state.local_total_cases}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Deaths</h5>\n                                <p className=\"card-text\">{this.state.local_deaths}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                    </div>\n\n                    <br/>\n\n                    <div className=\"card-deck\">\n                        <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">Recovered</h5>\n                                    <p className=\"card-text\">{this.state.local_recovered}</p>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                                </div>\n                        </div>\n                        <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">New Deaths</h5>\n                                    <p className=\"card-text\">{this.state.local_new_deaths}</p>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                                </div>\n                        </div>\n                        <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">Suspected or Confirmed Cases Currently Hospitalized</h5>\n                                    <p className=\"card-text\">{this.state.local_total_number_of_individuals_in_hospitals}</p>\n                                </div>\n                                <div className=\"card-footer\">\n                                    <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                                </div>\n                        </div>\n                    </div>\n\n                    </div>\n\n                    <div style={{padding: \"50px\", paddingTop: \"20px\"}}>\n                    <h1>Global</h1>\n\n                    <div className=\"card-deck\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">New Cases</h5>\n                                <p className=\"card-text\">{this.state.global_new_cases}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Total Cases</h5>\n                                <p className=\"card-text\">{this.state.global_total_cases}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Deaths</h5>\n                                <p className=\"card-text\">{this.state.global_deaths}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                    </div>\n\n                    <br/>\n\n                    <div className=\"card-deck\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">Recovered</h5>\n                                <p className=\"card-text\">{this.state.global_recovered}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">New Deaths</h5>\n                                <p className=\"card-text\">{this.state.global_new_deaths}</p>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">Last updated {this.state.update_date_time} </small>\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n\n                </div>\n\n\n\n\n            )}\n        </div>\n        );\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}